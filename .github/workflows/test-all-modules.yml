name: Test module for os

on:
  workflow_dispatch:
    inputs:
      os:
        description: "Operating System to test against"
        required: true
        type: choice
        options:
          - "rhel8"
          - "rhel9"
          - "ubuntu20"
          - "ubuntu22"
          - "fedora"
          - "ubuntu_latest_host"
      node_version:
        description: "Set node versions (separated by space)"
        required: true
        type: string
      ## Below options should be synced with the suported_modules.json file
      node_module:
        description: "Node module to test"
        required: false
        type: choice
        default: "all"
        options:
          - "all"
          - "express"
          - "prom-client"
          - "opposum"
          - "kube-service-bindings"
          - "faas-js-runtime"
          - "cloudevents"
          - "fastify"
          - "pino"
          - "langchain"
          - "@langchain/core"
      node_module_text:
        description: "Test any node module that exists on npm registry"
        required: false
        type: string
        default: ""
      citgm:
        description: "Run with citgm"
        required: false
        type: choice
        default: "false"
        options:
          - "true"
          - "false"

jobs:
  preparation:
    name: Preparation for ${{inputs.os}}
    runs-on: ubuntu-latest
    outputs:
      module_node_version: ${{ steps.get-supported-modules-and-node-versions.outputs.module_node_version }}
      machine: ${{ steps.container-or-host.outputs.machine }}
    steps:
      - name: checkout code
        uses: actions/checkout@v4

      - name: Get supported modules and node versions for ${{inputs.os}}
        id: get-supported-modules-and-node-versions
        run: |
          ./.github/scripts/get_supported_modules_and_node_versions.sh  ${{inputs.node_module}} ${{inputs.node_version}} ${{inputs.os}} >> $GITHUB_OUTPUT

      - name: Set env variables
        id: container-or-host
        run: |
          if [[ ${{inputs.os}} == "ubuntu_latest_host" ]]; then
            echo "machine=host" >> $GITHUB_OUTPUT
          else
            echo "machine=container" >> $GITHUB_OUTPUT
          fi

  test_all_modules:
    needs: preparation
    name: Test
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        module_node_version: ${{ fromJson(needs.preparation.outputs.module_node_version) }}
    steps:
      - name: checkout code
        uses: actions/checkout@v4

      - name: Parse node version and module name
        id: parse_node_and_module
        run: |
          node_version=$(echo '${{ matrix.module_node_version }}' | jq -r '.node_version')
          echo "node_version=$node_version" >> $GITHUB_OUTPUT

          module_name=$(echo '${{ matrix.module_node_version }}' | jq -r '.name')
          echo "module_name=$module_name" >> $GITHUB_OUTPUT

      - name: Use Node.js
        uses: actions/setup-node@v4
        if: ${{ needs.preparation.outputs.machine == 'host' }}
        with:
          node-version: ${{ steps.parse_node_and_module.outputs.node_version }}

      - name: Run on Host, os ${{ inputs.os }} node ${{ steps.parse_node_and_module.outputs.node_version }} module ${{ steps.parse_node_and_module.outputs.module_name }} citgm ${{ inputs.citgm }}
        if: ${{ needs.preparation.outputs.machine == 'host' }}
        run: |
          ./docker_scripts/install_test_module.sh "${{ steps.parse_node_and_module.outputs.module_name }}" "${{ inputs.citgm }}"

      - name: Run on container, os ${{ inputs.os }} node ${{ steps.parse_node_and_module.outputs.node_version }} module ${{ steps.parse_node_and_module.outputs.module_name }} citgm ${{ inputs.citgm }}
        if: ${{ needs.preparation.outputs.machine == 'container' }}
        run: |
          ./test.sh --operating-systems ${{inputs.os}} \
          --node-versions ${{ steps.parse_node_and_module.outputs.node_version }} \
          --packages ${{ steps.parse_node_and_module.outputs.module_name }} \
          --citgm ${{ inputs.citgm }}
